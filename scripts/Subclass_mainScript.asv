%% Climate luckydoor Main analysis - with subclasses
% Jason Nan
% 12/19/2023
clear all;close all;clc
cd('C:\Users\jason\OneDrive\Desktop\MS Beng\Neatlabs\Climate_LuckyDoor')
addpath('scripts')
addpath('scripts/DataAnalysis')
addpath('A:\eeglab_OldLSL_DataAna04072023')
eeglab
%% Loading in data and general preprocessing
% loading in data
dataPath='A:/ClimateLD/analysis_results/ClimateLD_allgroups_amp_rmv.mat';
load(dataPath)
% Defining time in mS for baseline correction
baselineTime=[-250 -50];
% Defining time ranges of interest
timeRange.choice=[0 500];
timeRange.imReward=[500 1000];
timeRange.cumReward=[1000 1500];

% defining network
fpn=[5 6 55 66 59 60];
con=[3 4 19 20 37 38 39 40 41 42 57 58 67 68];
admn=[11 12 25 26 29 30 53 54];
pdmn=[15 16 21 22 51 52];
mtldmn=[9 10 17 18 31 32 35 36 61 62 65 66 1];
vis=[7 8 13 14 23 24 27 28 43 44];
sm=[33 34 49 50 45 46];
van=[2 47 48 63 64];

netwrk(1).name='FPN';
netwrk(1).roi=fpn;
netwrk(2).name='CON';
netwrk(2).roi=con;
netwrk(3).name='aDMN';
netwrk(3).roi=admn;
netwrk(4).name='pDMN';
netwrk(4).roi=pdmn;
netwrk(5).name='mtlDMN';
netwrk(5).roi=mtldmn;
netwrk(6).name='Visual';
netwrk(6).roi=vis;
netwrk(7).name='SM';
netwrk(7).roi=sm;
netwrk(8).name='VAN';
netwrk(8).roi=van;


%% Scalp ERP Analysis

scalpObject=ScalpAnalysis(CLIMATELD.scalpData, CLIMATELD.info, baselineTime, timeRange);
% remove any missing subjects if any from Scalp data
scalpObject = scalpObject.cleanDatasets(); 
% standard processing pipeline, 5SD outlier, baseline correction
scalpObject = scalpObject.standardPipeline(); 

% Plotting scalp topo plots for variables in vars2plot and each timeRange
% speficied
vars2plot={'EVgain'};
scalpObject = scalpObject.plotScalpmap(vars2plot);
% Plotting significant channels from topo plots as line plots with all
% groups overlayed. Only selecting conditions which are in the specified
% vectors for var, frequency, and time ranges. 

%%
vars2plot={'EVgain'};
freq2plot={'broadband'};
times2plot={'choice'};
close all
errorType='none';
scalpObject.plotERPs(vars2plot,freq2plot,times2plot,errorType)

%% Scalp bar graph

obj=scalpObject;
%vars2plot,freq2plot,times2plot

color_list={'g','b','r'};
N=numel(fieldnames(obj.DATA));
timeNames = fieldnames(obj.info.timeRange);
sigElectrodes=obj.scalpResults.sigElectrodes;
for p=1:length(vars2plot)
    property=vars2plot{p};
    time_list = intersect(fieldnames(sigElectrodes.(property)),times2plot);

    for t=1:length(time_list)

        time=time_list{t};
        sig=sigElectrodes.(property).(time);
        [~,~,ib] = intersect(fieldnames(sig),freq2plot);
        freq_list=freq2plot(sort(ib));

        % get longest electrode map
        maxLength = 0;
        for i = 1:length(freq_list)
            currentLength = length(sig.(freq_list{i}));  % Get the length of the current cell array
            if currentLength > maxLength
                maxLength = currentLength;  % Update the maximum length
            end
        end

        if ~isempty(freq_list)
            figure
            for f=1:length(freq_list)

                for c=1:length(sig.(freq_list{f}))

                    %subplot(length(freq_list),maxLength,(f-1)*maxLength+c)
                    subplot(maxLength,length(freq_list),(c-1) * length(freq_list) + f)

                    freq=freq_list{f};
                    chan=sig.(freq){c};
                    freqIdx = find(strcmp(obj.info.freq_list, freq));
                    timeIdx = obj.info.timeIDX.(time);
                    elecIdxs = find(strcmp({obj.info.chanlocs.labels},chan ));
                    data=[];sem=[];
                    hold on
                    for n=1:N
                        subdata = squeeze(nanmean(obj.getGroupData(obj.info.groupNames{n},property,freq,timeName,elecIdxs),3));
                        data(n) = nanmean(subdata);
                        sem(n) = std(subdata)/sqrt(length(subdata));
                    end
                    obj.plotErrBar(data,sem)
                    
                                            [ngroups, nbars] = size(data);
                        groupwidth = min(0.8, nbars/(nbars + 1.5));

                        for comb = 1:size(combinations, 1)
                            group1=obj.info.groupNames{combinations(comb, 1)};
                            group2=obj.info.groupNames{combinations(comb, 2)};
                            s1=[];s2=[];
                            for i=1:length(netwrk)
                                % collapsing networks
                                s1(i,:) = squeeze(nanmean(nanmean(obj.getGroupData(group1,property,freq,timeName,netwrk(i).roi),2),3));
                                s2(i,:) = squeeze(nanmean(nanmean(obj.getGroupData(group2,property,freq,timeName,netwrk(i).roi),2),3));
                            end
                            %[~,pvals(comb,:)] = ttest2(s1, s2);
                            pvals(comb,:)=obj.calGroupSig(s1,s2);

                            group1Location = (1:ngroups) - groupwidth/2 + (2*combinations(comb, 1)-1) * groupwidth / (2*nbars);
                            group2Location = (1:ngroups) - groupwidth/2 + (2*combinations(comb, 2)-1) * groupwidth / (2*nbars);
                            A=[group1Location;group2Location]';
                            groupingKey = mat2cell(A, ones(1, size(A, 1)), size(A, 2));
                            sigstar(groupingKey,pvals(comb,:))
                        end
                    
                    
                    
                    
                    hold off

                    xlabel(chan)
                    xticks([])
                    if c==1
                        title(freq,'fontweight','bold','fontsize',16)
                    end
                end
            end
            Lgnd = legend(h,obj.info.groupNames);
            Lgnd.Position(1) = 0.7;
            Lgnd.Position(2) = 0.9;
            sgtitle(strcat(property,'-',time))
        end
    end
end





%% brainNetwork Analysis
sourceObject=SourceAnalysis(CLIMATELD.sourceData, CLIMATELD.info, baselineTime, timeRange);
sourceObject = sourceObject.cleanDatasets(); 
sourceObject = sourceObject.standardPipeline(); 
sourceObject.plotNetwork(netwrk,vars2plot)
















